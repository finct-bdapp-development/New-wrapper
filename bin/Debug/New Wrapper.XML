<?xml version="1.0"?>
<doc>
    <assembly>
        <name>New Wrapper</name>
    </assembly>
    <members>
        <member name="T:New_Wrapper.DataHandler">
            <summary>
            John Handles the connecting to and updating of data using OLE
            </summary>
            //<remarks>The default instance of the data handler only connects and updates a single table. For datasets containing
            multiple updateable tables use the MultiHandler</remarks>
        </member>
        <member name="P:New_Wrapper.DataHandler.ActionedCommand">
            <summary>
            An SQL command onbject containing the result of a data connection
            </summary>
        </member>
        <member name="M:New_Wrapper.DataHandler.ReturnExcelSheetAsDataTable(System.String,System.String,System.Boolean)">
            <summary>
            Returns the data in an Excel sheet as a data table
            </summary>
            <param name="pathToExcelFile">The path to the file to be converted</param>
            <param name="sheetName">The name of the sheet where the data is held</param>
            <param name="includesHeaderRow">Whether the data has a header row showing the column names</param>
            <returns></returns>
            <remarks>The method uses the ACE provider and should work for all Excel files</remarks>
        </member>
        <member name="M:New_Wrapper.DataHandler.RunStoredProcedure(System.Collections.Generic.List{System.Data.SqlClient.SqlParameter}@,System.String,System.String)">
            <summary>
            Action a stored procedure with associated parameters
            </summary>
            <param name="parameters">A list of the parameters to apply</param>
            <param name="connectionString">the connection string for the SQL data source</param>
            <param name="storedProcedureName">The name of the stored procedure</param>
        </member>
        <member name="M:New_Wrapper.DataHandler.RunStoredProcedure(System.String,System.String)">
            <summary>
            Action a stored procedure that does not require any parameters
            </summary>
            <param name="connectionString">The connection string for the SQL data source</param>
            <param name="storedProcedureName">The name of the stored procedure</param>
        </member>
        <member name="M:New_Wrapper.DataHandler.CheckUserHasRole(System.String,System.String)">
            <summary>
            Confirm whether the currently logged in user has the specified role
            </summary>
            <param name="provider">The connection string for the data source</param>
            <param name="roleName">The name of the SQL user role to be checked</param>
            <returns></returns>
        </member>
        <member name="M:New_Wrapper.DataHandler.RunStoredProcedurehAndReturnDataset(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter}@,System.String)">
            <summary>
            Return a dataset based on the result of running a stored procedure that returns multiple results
            </summary>
            <param name="provider">The connection string for the data source</param>
            <param name="parameters">The parameters required by the stored procedure</param>
            <param name="procedureName">The anme of the stored procedure</param>
            <returns></returns>
        </member>
        <member name="M:New_Wrapper.DataHandler.RunStoredProcedureAndReturnSingleTable(System.String,System.String)">
            <summary>
            Returns a data table based on running a stored procedure that has a single result set
            </summary>
            <param name="provider">The connection string for the data source</param>
            <param name="procedureName">The name of the stored procedure</param>
            <returns></returns>
        </member>
        <member name="M:New_Wrapper.DataHandler.RunStoredProcedureAndReturnSingleTable(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter}@,System.String)">
            <summary>
            Returns a data table based on running a stored procedure that has a single result set
            </summary>
            <param name="provider">The connection string for the data source</param>
            <param name="parameters">The parameters required by the stored procedure</param>
            <param name="procedureName">The name of the stored procedure</param>
            <returns></returns>
        </member>
        <member name="M:New_Wrapper.DataHandler.RunStoredProcedureAndReturnSingleTable(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter}@,System.String,System.Int32)">
            <summary>
            Returns a data table based on running a stored procedure that has multiple results
            </summary>
            <param name="provider">The connection string for the data source</param>
            <param name="parameters">The parameters required by the stored procedure</param>
            <param name="procedureName">The name of the stored procedure</param>
            <param name="tableToReturn">The result set that should be returned</param>
            <returns></returns>
            <remarks>This method can result in large amounts of unneccessary data being returned. Where possible use the overload that uses a
            stored procedure that returns a single result set</remarks>
        </member>
        <member name="M:New_Wrapper.DataHandler.IsExistingParameter(System.Collections.Generic.List{System.Data.SqlClient.SqlParameter}@,System.Data.SqlClient.SqlParameter@)">
            <summary>
            Confirm whether a stroed procedure already exists in the specified parameter array
            </summary>
            <param name="parameters">A list array of SQL parameters</param>
            <param name="parameterToAdd">The sql parameter to be checked against the existing parameters</param>
            <returns></returns>
            <remarks>The comparison is based on the parameter name and value. If the name exists but the value is different an
            exception will be thrown</remarks>
        </member>
        <member name="M:New_Wrapper.DataHandler.InsertBulkData(System.String,System.String,System.String,System.String,System.Int32,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@,System.Boolean,System.Int32)">
            <summary>
            Import bulk data into SQL database table
            </summary>
            <param name="passedDataSourceProvider">The OLEDb dataprovider to the source data to be inserted in to SQL</param>
            <param name="passedDataSourceQueryString">If query not included in provider string, include here</param>
            <param name="passedDestinationProvider">The SQL dataprovider to the source data to be inserted in to SQL</param>
            <param name="passedDestinationTableName">The name of the destination table name in the SQL Database</param>
            <param name="passedNumberOfFieldsInLists">This nuumber must match the number of items in passed source and desination lists</param>
            <param name="passedSourceFieldNames">The names of the field in the source data that will be inserted in to destination table</param>
            <param name="passedDestinationFieldNames">The corresponding field names in the destination table that will receive the source data</param>
            <param name="headerRowInSourceProvider">False if header row not included. This will ensure delete first row of data table is deleted.</param>
            <param name="passedBulkCopyTimeout">Default server value = 30. Consider increasing for large datasets</param>
        </member>
        <member name="M:New_Wrapper.DataHandler.InsertBulkData(System.Data.DataTable,System.String,System.String,System.Int32,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@,System.Boolean,System.Int32)">
            <summary>
            Import bulk data into SQL database table
            </summary>
            <param name="passedDataTable">Datatable containing the data to insert into SQL database</param>
            <param name="passedDestinationProvider">The SQL dataprovider to the source data to be inserted in to SQL</param>
            <param name="passedDestinationTableName">The name of the destination table name in the SQL Database</param>
            <param name="passedNumberOfFieldsInLists">This nuumber must match the number of items in passed source and desination lists</param>
            <param name="passedSourceFieldNames">The names of the field in the source data that will be inserted in to destination table</param>
            <param name="passedDestinationFieldNames">The corresponding field names in the destination table that will receive the source data</param>
            <param name="headerRowInSourceProvider">False if header row not included. This will ensure delete first row of data table is deleted.</param>
            <param name="passedBulkCopyTimeout">Default server value = 30. Consider increasing for large datasets</param>
        </member>
        <member name="M:New_Wrapper.DataHandler.InsertBulkDataBatch(System.Data.DataTable,System.String,System.String,System.Int32,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@,System.Boolean,System.Int32,System.Int32)">
            <summary>
            As above but as a transaction to rollback
            </summary>
            <param name="passedDataTable"></param>
            <param name="passedDestinationProvider"></param>
            <param name="passedDestinationTableName"></param>
            <param name="passedNumberOfFieldsInLists"></param>
            <param name="passedSourceFieldNames"></param>
            <param name="passedDestinationFieldNames"></param>
            <param name="headerRowInSourceProvider"></param>
            <param name="passedBulkCopyTimeout"></param>
        </member>
        <member name="M:New_Wrapper.DataHandler.InsertBulkData(System.Data.DataTable@,System.String,System.String)">
            <summary>
            Import bulk data into SQL database table
            </summary>
            <param name="passedData">The data to be imported</param>
            <param name="destinationProvider">The connection string for the datasource that the data will be uploaded to</param>
            <param name="destinationTable">The name of the table that data will be uploaded to</param>
            <remarks>The passed data must only contain the fields which are to be uploaded to the datasource</remarks>
        </member>
        <member name="M:New_Wrapper.DataHandler.InsertBulkDataBatch(System.String,System.Data.DataTable[],System.String[],System.Boolean[],System.Collections.Generic.List{System.String[]},System.Collections.Generic.List{System.String[]},System.Int32[],System.Int32)">
            <summary>
             Send multiple parameter lists for batch bulk copy
            </summary>
            <param name="passedDataTableList">List of all tables</param>
            <param name="passedDestinationProvider">Provider</param>
            <param name="passedDestinationTableNameList">List of destination tables</param>
            <param name="headerRowInSourceProviderList">List of header row exists</param>
            <param name="passedSourceFieldNamesList">List of array of passed field names</param>
            <param name="passedDestinationFieldNamesList">List of array of destination field names</param>
            <param name="passedBulkCopyTimeout">Bulk copy timeout</param>
            <param name="passedBatchSizeList">List of batch sizes</param>
        </member>
        <member name="M:New_Wrapper.DataHandler.InsertBulkDataViaCSV(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Import bulk data from a CSV file
            </summary>
            <param name="targetProvider">The connection string for the SQL data source into which the data will be inserted</param>
            <param name="targetTable">The name of the table that data will be inserted into</param>
            <param name="fileToImport">The full path to csv file to be imported</param>
            <param name="settingsFile">The full path to the settings file for mapping the CSV file to the data source</param>
            <param name="includesHeader">Whether the CSV file includes a header row</param>
            <remarks>The settings file is a simple ini file consisting of a delimited line showing where each field in the CSV
            should go within the datasource - CSVColumnName,AssociatedSQLColumnName
            For example:
            TPName,CustomerName
            Address1,AddressLine1</remarks>
        </member>
        <member name="M:New_Wrapper.DataHandler.ReturnCSVAsDataTable(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="fileToImport"></param>
            <param name="includesHeader"></param>
            <returns></returns>
        </member>
        <member name="M:New_Wrapper.DataHandler.ConvertExcelToDataTable(System.String)">
            <summary>
            
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:New_Wrapper.DataHandler.ReturnExcelAsDataTable(System.String)">
            <summary>
            
            </summary>
            <param name="fileToImport"></param>
            <returns></returns>
        </member>
        <member name="M:New_Wrapper.DataHandler.GenerateCSV(System.Data.DataTable,System.String,System.String)">
            <summary>
            Dumps the contents of a data table to a comma separated file
            </summary>
            <param name="data">The table containing the data</param>
            <param name="path">The destination for the csv file</param>
            <param name="fileName">The name of the csv that will be produced</param>
            <remarks>This version assumes that the data does not contain field data containing commas as this will throw out the formatting of the row
            within the csv file. If necessary an overload of the method should be produced to accomodate data that contains commas and control 
            characters</remarks>
        </member>
        <member name="M:New_Wrapper.DataHandler.GenerateCSV(System.Data.DataTable@,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="path"></param>
            <param name="fileName"></param>
            <param name="delim"></param>
        </member>
        <member name="M:New_Wrapper.DataHandler.GenerateCSV(System.Data.DataTable@,System.String,System.String,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="path"></param>
            <param name="prefix"></param>
            <param name="maxPerBatch"></param>
            <param name="excludeBatchNumber"></param>
            <param name="delimiter"></param>
        </member>
        <member name="M:New_Wrapper.DataHandler.GenerateCSVRemoveColumn(System.Data.DataTable@,System.String,System.String,System.Int32,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="path"></param>
            <param name="prefix"></param>
            <param name="maxPerBatch"></param>
            <param name="excludeBatchNumber"></param>
            <param name="delimiter"></param>
            <param name="ignore"></param>
            <param name="addConsec"></param>
            <returns></returns>
        </member>
        <member name="M:New_Wrapper.DataHandler.GenerateCSV(System.Data.DataTable@,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="path"></param>
            <param name="prefix"></param>
            <param name="maxPerBatch"></param>
            <param name="excludeBatchNumber"></param>
        </member>
        <member name="M:New_Wrapper.DataHandler.ConvertRowToTable(System.Data.DataRow,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="rowToConvert"></param>
            <param name="headerForFieldColumn"></param>
            <param name="headerForValueColumn"></param>
            <returns></returns>
        </member>
        <member name="F:New_Wrapper.DataHandler.m_connection">
            <summary>
            
            </summary>
        </member>
        <member name="F:New_Wrapper.DataHandler.m_SQLconnection">
            <summary>
            
            </summary>
        </member>
        <member name="P:New_Wrapper.DataHandler.localAdapter">
            <summary>
            An adapter containing to the connection to the data source
            </summary>
        </member>
        <member name="P:New_Wrapper.DataHandler.SQLAdapter">
            <summary>
            An adapter containing the connection to the data source
            </summary>
        </member>
        <member name="M:New_Wrapper.DataHandler.#ctor">
            <summary>
            Creates a default instance of the class - there will be no disconnected access to the underlying
            data source
            </summary>
        </member>
        <member name="M:New_Wrapper.DataHandler.#ctor(System.String,System.String)">
             <summary>
             Creates an instance of the class. As part of creating the instance the class connects to the data
             source
             </summary>
             <param name="connectionString">The provider string for connecting to the data source</param>
             <param name="queryString">The query to be applied when creating the connection</param>
             <remarks>This version of the method requires the full provider string (including any relevant password). It is therefore not
             recommended for use with password protected data sources. Use the overloaded method which allows you to pass an encrypted
             password when initializing the connection</remarks>
             <example>
             This example shows you how to connect to a non-password protected data source
             <code>
             public void ConnectToResultsData()
             {
                string provider = Provider=Microsoft.Jet.OLEDB.4.0;Data Source="C:\SomeFolder\MyProject\Data.mdb";Jet OLEDB:Database Password=";
                ResultsHandler = new New_Wrapper.DataHandler(provider, "SELECT Results.CaseId, Results.Result FROM Results");
             }
             </code>
            </example>
        </member>
        <member name="M:New_Wrapper.DataHandler.CreateAdapter(System.String,System.String,System.Data.OleDb.OleDbDataAdapter@)">
            <summary>
            Creates a data adapter to handle communication between the class and the data source
            </summary>
            <param name="passedConnString">The provider string for connecting to the data source</param>
            <param name="passedQuery">The query to be applied when creating the connection</param>
            <param name="passedAdapter">The adapter that the connection will stored into</param>
        </member>
        <member name="M:New_Wrapper.DataHandler.CreateDataset">
            <summary>
            Creates a dataset based on the data source connection
            </summary>
            <returns>A dataset containing the filtered data from the data source</returns>
            <example>
            The method is used after successfully conneccting to the datasource to populate a dataset with the resulting data
            <code>
            public void ConnectToResultsData()
            {
               string provider = Provider=Microsoft.Jet.OLEDB.4.0;Data Source="C:\SomeFolder\MyProject\Data.mdb";Jet OLEDB:Database Password=";
               string password = "thisisencrypted";
               ResultsHandler = new New_Wrapper.DataHandler(provider, password, "SELECT Results.CaseId, Results.Result FROM Results");
               ExistingReturns = ResultsHandler.CreateDataset();
            }
            </code>
            </example>
        </member>
        <member name="M:New_Wrapper.DataHandler.UpdateDataset(System.Data.DataSet)">
            <summary>
            Updates the data source with any changes made to the dataset
            </summary>
            <param name="passedDataset">The dataset that contains the changes</param>
            <example>To store any changes made to the dataset you simply need to pass the dataset to the method. Any entries that are
            flagged as having been changed will be committed to the datasource (this includes, additions, edits and deletions)
            <code>
             //Your code to update the dataset
             myDataHandler.UpdateDataset(myDataset);
            </code>
            Note - the dataset being updated must be the one created from this particular instance of the datahandler - trying to pass a
            dataset not generated by the specific instance of the class will result in a data exception
            </example>
        </member>
        <member name="M:New_Wrapper.DataHandler.GetDataSet(System.String,System.String)">
            <summary>
            Creates a DataSet based on a SQL string
            This method creates a separate data adapter to process the data request - it does not affect any
            persistent connection made when creating the class
            </summary>
            <param name="provider">The provider string for connecting to the data source</param>
            <param name="getDataQuery">The query to be used when creating the DataSet based on the data source</param>
        </member>
        <member name="M:New_Wrapper.DataHandler.InsertData(System.String,System.String)">
            <summary>
            Inserts data directly into the data source
            This method creates a separate data adapter to process the insert command - it does not affect any
            persistent connection made when creating the class
            </summary>
            <param name="provider">The provider string for connecting to the data source</param>
            <param name="insertQuery">The insert query to be used when updating the data source</param>
        </member>
        <member name="M:New_Wrapper.DataHandler.DeleteData(System.String,System.String)">
            <summary>
            Deletes data directly from the data source
            this method creates a separate data adapter to process the delete command - it does not affect any
            persistent connection made when creating the class
            </summary>
            <param name="provider">The provider string for connecting to the data source</param>
            <param name="deleteQuery">The delete query to be used when updating the data source</param>
        </member>
        <member name="M:New_Wrapper.DataHandler.UpdateData(System.String,System.String)">
            <summary>
            Updates data directly from the data source
            this method creates a separate data adapter to process the update command - it does not affect any
            persistent connection made when creating the class
            </summary>
            <param name="provider">The provider string for connecting to the data source</param>
            <param name="updateQuery">The update query to be used when updating the data source</param>
        </member>
        <member name="M:New_Wrapper.DataHandler.CloseConnection">
            <summary>
            
            </summary>
        </member>
        <member name="M:New_Wrapper.DataHandler.CloseConnection(System.Boolean)">
            <summary>
            
            </summary>
            <param name="dispose"></param>
        </member>
        <member name="M:New_Wrapper.DataHandler.CloseConnection(System.String)">
            <summary>
            Close the connection based on what type of connection has been made
            </summary>
            <param name="dataType">The data engine that was used to connectio to the data source (i.e. SQL, ADO)</param>
        </member>
        <member name="M:New_Wrapper.DataHandler.CreateDataset(System.String[])">
            <summary>
            Populates a dataset with multiple tables
            </summary>
            <param name="queryList">The tables to be inckuded in the dataset. Format = [query string; table name]</param>
            <returns>A dataset containing the filtered data from the data source</returns>
            <remarks>As you are changing the Select command for the data adapter this method should only be used when viewing
            statuc data such as look up tables</remarks>
        </member>
        <member name="M:New_Wrapper.DataHandler.RetrieveListOfSQLDatabases(System.String)">
            <summary>
            Gets a list of the 'databases' mounted on a specified SQL instance
            </summary>
            <param name="serverName">The name of the SQL server</param>
            <returns>A data table containing the schema data for the 'databases'</returns>
        </member>
        <member name="M:New_Wrapper.DataHandler.RetrieveListOfTablesInSQLDatabase(System.String,System.String)">
            <summary>
            Gets a list of tables in a specified SQL database
            </summary>
            <param name="serverName">The name of the server that the database is mounted on</param>
            <param name="databaseName">The name of the database</param>
            <returns>A data table containing the tables schema for the database</returns>
        </member>
        <member name="M:New_Wrapper.DataHandler.RetrieveColumnSchemaForSQLTable(System.String,System.String,System.String)">
            <summary>
            Retrieve a list of the columns in a specified SQL table
            </summary>
            <param name="serverName">The name of the server that the database is mounted on</param>
            <param name="databaseName">The name of the database</param>
            <param name="tableName">The name of the table in the database</param>
            <returns>A data table containing the columns schema for the specified table</returns>
        </member>
        <member name="T:New_Wrapper.MultiTableHandler">
            <summary>
            Handles the connecting to and updating of data using OLE
            </summary>
            <remarks>The MultiTableHandler allows you to update multiple tables within a single dataset</remarks>
        </member>
        <member name="P:New_Wrapper.MultiTableHandler.selectQueries">
            <summary>
            An multi-dimensional array of the queries that will be used to retrieve data from the data source
            </summary>
            <remarks>The table name should be the first 'sub element' followed by the appropriate SQL query as
            the second 'sub element'
            For instance, selectQueries[0,0] = "tblMain" selectQueries[0,1] = "SELECT...."</remarks>
        </member>
        <member name="P:New_Wrapper.MultiTableHandler.providerString">
            <summary>
            The string for connecting to the data source
            </summary>
        </member>
        <member name="P:New_Wrapper.MultiTableHandler.sourceData">
            <summary>
            A dataset containing the data tables
            </summary>
        </member>
        <member name="M:New_Wrapper.MultiTableHandler.#ctor">
            <summary>
            Default intialiser for the class. 
            </summary>
            <remarks>The properties for the class must be set prior to using the class to update or retrieve
            data</remarks>
        </member>
        <member name="M:New_Wrapper.MultiTableHandler.#ctor(System.String[0:,0:],System.String)">
            <summary>
            Initialises the class and set the relevant properties
            </summary>
            <param name="passedQueries">The array containing the list of tables and associated queries</param>
            <param name="passedProvider">The provider string for connecting to the database</param>
            <remarks>The table name should be the first 'sub element' followed by the appropriate SQL query as
            the second 'sub element'
            For instance, selectQueries[0,0] = "tblMain" selectQueries[0,1] = "SELECT...."</remarks>
        </member>
        <member name="M:New_Wrapper.MultiTableHandler.connectToData(System.String[0:,0:],System.String)">
            <summary>
            Connects to the data source and populates a data set with the requested tables
            </summary>
            <param name="passedQueries">The table names and SQL queries that the data tables will be based on</param>
            <param name="passedProvider">The provider string for connecting to the data source</param>
        </member>
        <member name="M:New_Wrapper.MultiTableHandler.connectToData">
            <summary>
            Connects to the data source and populates a data set with the requested tables
            </summary>
        </member>
        <member name="M:New_Wrapper.MultiTableHandler.UpdateData(System.String)">
            <summary>
            Updates the specified table(s) in the data set
            </summary>
            <param name="tableName">The name of the table that is to be updated</param>
        </member>
        <member name="M:New_Wrapper.MultiTableHandler.AddTableToDataset(System.Data.DataSet@,System.String)">
            <summary>
            Adds a table from the multihandler instance to an external dataset
            </summary>
            <param name="passedDataset">The dataset that the table is to be copied to</param>
            <param name="passedTableName">The name of the table to be copied to the external dataset</param>
            <remarks>The table being copied must already exist in the sourceData property of the class</remarks>
        </member>
        <member name="M:New_Wrapper.MultiTableHandler.AddTableToDataset(System.Data.DataSet@,System.String,System.String,System.String)">
            <summary>
            Adds a table from the multihandler instance to an external dataset
            </summary>
            <param name="passedDataset">The dataset that the table is to be copied to</param>
            <param name="passedTableName">The name of the table to be copied to the external dataset</param>
            <param name="filter">The filter that is to be applied to the data</param>
            <param name="passedSort">Any sort that is to be applied to the data</param>
        </member>
    </members>
</doc>
